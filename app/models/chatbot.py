import re

class ChatbotModel:
    """Handles chatbot logic and data processing."""
    
    def __init__(self):
        # Predefined response patterns with conversational Mongolian style
        self.patterns = [
            {
                "regex": re.compile(r"(?i)—Å–∞–π–Ω –±–∞–π–Ω–∞ —É—É|—Å–∞–π–Ω —É—É|—Å”ô–ª–µ–º"),
                "reply": "–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! –Ø–≥ —é—É–≥ —è—Ä–∏–ª—á–∏—Ö—ä—è? üòé"
            },
            {
                "regex": re.compile(r"(?i)–±–∞–π–Ω–∞ —É—É|–±–∞–π–Ω—É—É"),
                "reply": "–ë–∞–π–Ω–∞ —à“Ø“Ø, –±–∞–π–Ω–∞! üòÑ –ß–∏ —è–≥ —é—É–≥ —Ö—ç–ª—á–∏—Ö—ä—è –≥—ç—ç–¥ –±–∞–π–Ω–∞ –≤—ç?"
            },
            {
                "regex": re.compile(r"(?i)–Ω—ç—Ä —á–∏–Ω—å —Ö—ç–Ω –±—ç|—á–∏ —Ö—ç–Ω –≤—ç"),
                "reply": "–ë–∏ —ç–Ω–≥–∏–π–Ω —á–∞—Ç–±–æ—Ç, –≥—ç—Ö–¥—ç—ç –≥–æ—ë —Ç—É—Å–ª–∞–≥—á —à“Ø“Ø! üòä –ß–∏–Ω–∏–π –Ω—ç—Ä —Ö—ç–Ω –±—ç?"
            },
            {
                "regex": re.compile(r"(?i)–±–∞—è—Ä–ª–∞–ª–∞–∞|–±–∞—è—Ä–ª–∞–∞"),
                "reply": "–ó–∞ –∑–∞, —Ç–∞–∞—Ç–∞–π –±–∞–π–Ω–∞! –î–∞—Ö–∏–Ω —é—É–≥ —Ö”©”©—Ä”©–ª–¥—á–∏—Ö—ä—è?"
            },
            {
                "regex": re.compile(r"(?i)—Ü–∞–≥ —Ö—ç–¥ –≤—ç|–æ–¥–æ–æ —Ö—ç–¥ –≤—ç"),
                "reply": "–¶–∞–≥ –±–æ–ª –º–∏–Ω–∏–π —Ö—É–≤—å–¥ —Ç–∞–Ω—ã–≥ –∏–Ω—ç—ç–ª–≥—ç—Ö —Ü–∞–≥ –ª –±–∞–π–Ω–∞ —à“Ø“Ø! üòú –Æ—É–≥ —è—Ä—å—ä—è?"
            },
            {
                "regex": re.compile(r"(?i)—é—É –±–∞–π–Ω–∞ –≤—ç|—é—É –±–æ–ª–∂ –±–∞–π–Ω–∞ –≤—ç"),
                "reply": "–Æ—É —á –±–æ–ª–æ–æ–≥“Ø–π, –≥—ç—Ö–¥—ç—ç —á–∏ –Ω–∞–¥–∞–¥ –º–µ—Å—Å–µ–∂ –±–∏—á—á–∏—Ö–ª—ç—ç! üòÑ –Ø–≥ —é—É–≥ —è—Ä–∏–ª—ä—è?"
            },
        ]

    def process_message(self, message):
        """Process incoming message and return response."""
        if not message or not message.strip():
            return None
        
        input_text = message.lower()
        response_msg = "–£—É—á–ª–∞–∞—Ä–∞–π, –±–∏ —Ç—ç—Ä —é—É–≥ —Ö—ç–ª—á–∏—Ö—Å–Ω–∏–π–≥ —Å–∞–π–Ω –æ–π–ª–≥–æ—Å–æ–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω —Ö—ç–ª—á–∏—Ö! üòä"
        
        for pattern in self.patterns:
            if pattern["regex"].search(input_text):
                response_msg = pattern["reply"]
                break
        
        return response_msg
